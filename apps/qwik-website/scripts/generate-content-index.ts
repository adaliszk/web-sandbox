import { lstat, readdir, writeFile } from "node:fs/promises";
import { resolve } from "node:path";
import { cwd } from "node:process";
import nameParser from "camelcase";

const CONTENT_DIR = resolve(cwd(), "content");

const toCamelCase = (input: string) => nameParser(input);
const toPascalCase = (input: string) => nameParser(input, { pascalCase: true });

async function main() {
    const entries = await readdir(CONTENT_DIR);
    const collections = entries.filter(async (entry) => {
        const stat = await lstat(resolve(CONTENT_DIR, entry));
        return stat.isDirectory();
    });

    for await (const collection of collections) {
        const entries = await readdir(resolve(CONTENT_DIR, collection));
        const documents = entries.filter(
            (entry) => entry.endsWith(".md") || entry.endsWith(".mdx"),
        );

        const index = documents.map((document) => {
            const name = document.replace(".md", "");
            const pascalName = toPascalCase(name);
            const camelName = toCamelCase(name);
            return {
                iky: name,
                imp: `import ${camelName}, { frontmatter as ${camelName}Data } from "./${document}";`,
                eky: pascalName,
                exp: `export const ${pascalName} = { frontmatter: ${camelName}Data, Content: ${camelName} };`,
                map: `["${name}", ${pascalName}],`,
            };
        });

        const indexContent: string[] = [
            "// Do not modify this file manually!",
            "// This file is generated by generate-content-index.ts",
            "// Regenerate this file by running `pnpm run build.contentIndex`",
        ];
        for (const { imp } of index) indexContent.push(imp);
        for (const { exp } of index) indexContent.push(exp);
        const collectionKey = index.map(({ iky }) => `"${iky}"`).join(" | ");
        indexContent.push(
            `export type MarkdownImport = typeof ${index[0].eky};`,
            `export type CollectionKey = ${collectionKey};`,
            "export const collection = new Map<CollectionKey, MarkdownImport>([",
        );
        for (const { map } of index) indexContent.push(`    ${map}`);
        indexContent.push("])");

        await writeFile(
            resolve(CONTENT_DIR, collection, "index.ts"),
            `${indexContent.join("\n")}\n`,
            {
                encoding: "utf-8",
                flag: "w+",
            },
        );
    }
}

void main();
